import requests
import re
import os
import sys
import time
from datetime import datetime, timedelta
from colorama import Fore, Back, Style, init

# Initialize colorama
init(autoreset=True)

# ASCII Art Banner
BANNER = r"""
 ██████╗██╗   ██╗███████╗    ██╗      ██████╗  ██████╗ ██╗  ██╗██╗   ██╗██████╗ 
██╔════╝██║   ██║██╔════╝    ██║     ██╔═══██╗██╔═══██╗██║ ██╔╝██║   ██║██╔══██╗
██║     ██║   ██║█████╗      ██║     ██║   ██║██║   ██║█████╔╝ ██║   ██║██████╔╝
██║     ╚██╗ ██╔╝██╔══╝      ██║     ██║   ██║██║   ██║██╔═██╗ ██║   ██║██╔═══╝ 
╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝╚██████╔╝██║  ██╗╚██████╔╝██║     
 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝     
                                                                                 
           🔍 Common Vulnerabilities and Exposures Search Tool 🔍
           
"""

API_KEY = "decfc3fe-6e2b-4dfc-b500-e002ae1d7bd0"
BASE_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
HEADERS = {
    "User-Agent": "CVE-Search-Tool/1.0",
    "apiKey": API_KEY
}

def clear_screen():
    """Clear the terminal screen based on OS."""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_loading_spinner(seconds, message="Loading"):
    """Display a spinner animation while loading."""
    spinner = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏']
    end_time = time.time() + seconds
    i = 0
    
    while time.time() < end_time:
        sys.stdout.write(f"\r{Fore.CYAN}{message} {spinner[i % len(spinner)]}{Style.RESET_ALL}")
        sys.stdout.flush()
        i += 1
        time.sleep(0.1)
    
    sys.stdout.write("\r" + " " * 50 + "\r")
    sys.stdout.flush()

def is_cve_id(input_str):
    """Check if input string matches CVE ID format."""
    return re.match(r"^CVE-\d{4}-\d{4,}$", input_str, re.IGNORECASE) is not None

def search_by_cve_id(cve_id):
    """Search for a specific CVE ID."""
    url = f"{BASE_URL}?cveId={cve_id}"
    print_loading_spinner(1.5, f"Searching for {Fore.YELLOW}{cve_id}{Fore.CYAN}")
    
    try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
        return response.json().get("vulnerabilities", [])
    except requests.RequestException as e:
        print(f"{Fore.RED}❌ Request failed: {e}{Style.RESET_ALL}")
        return []

def search_keyword_cves(keyword, limit=5, max_time_period_days=730):  # 730 days = 2 years
    """Search for CVEs containing the given keyword."""
    total_results = []
    end_date = datetime.now()
    start_date = end_date - timedelta(days=max_time_period_days)
    
    # Calculate how many days to check in each loop to respect API's 120-day limit
    days_per_window = 120  # NVD API limitation
    current_end_date = end_date
    
    print(f"{Fore.CYAN}🔎 Searching for CVEs related to '{Fore.YELLOW}{keyword}{Fore.CYAN}' from the past {max_time_period_days} days...{Style.RESET_ALL}")
    
    # Paginate through time windows until we reach our limit or check the entire time period
    while current_end_date > start_date and len(total_results) < limit:
        current_start_date = max(current_end_date - timedelta(days=days_per_window), start_date)
        
        # Format dates properly for the API
        pub_start = current_start_date.strftime("%Y-%m-%dT00:00:00.000")
        pub_end = current_end_date.strftime("%Y-%m-%dT23:59:59.999")
        
        params = {
            "keywordSearch": keyword,
            "pubStartDate": pub_start,
            "pubEndDate": pub_end,
            "resultsPerPage": min(20, limit - len(total_results)),
            "startIndex": 0
        }
        
        print_loading_spinner(1.5, f"Searching '{Fore.YELLOW}{keyword}{Fore.CYAN}' from {Fore.YELLOW}{current_start_date.date()}{Fore.CYAN} to {Fore.YELLOW}{current_end_date.date()}{Fore.CYAN}")
        
        try:
            response = requests.get(BASE_URL, headers=HEADERS, params=params)
            
            if response.status_code == 200:
                data = response.json()
                results = data.get("vulnerabilities", [])
                if results:
                    print(f"{Fore.GREEN}✅ Found {Fore.YELLOW}{len(results)}{Fore.GREEN} results in time window {Fore.YELLOW}{current_start_date.date()}{Fore.GREEN} to {Fore.YELLOW}{current_end_date.date()}{Fore.GREEN}.{Style.RESET_ALL}")
                    # Extend our results list
                    total_results.extend(results)
                else:
                    print(f"{Fore.YELLOW}⚠️ No results in time window {current_start_date.date()} to {current_end_date.date()}.{Style.RESET_ALL}")
            else:
                print(f"{Fore.YELLOW}⚠️ API returned status code {response.status_code} for time window.{Style.RESET_ALL}")
                if response.status_code == 403:
                    print(f"{Fore.RED}❌ API key might be invalid or request was rate-limited.{Style.RESET_ALL}")
                    break  # Stop trying if authentication fails
                elif response.status_code == 429:
                    print(f"{Fore.RED}❌ Rate limit exceeded. Please try again later.{Style.RESET_ALL}")
                    break  # Stop trying if rate limited
        except requests.RequestException as e:
            print(f"{Fore.RED}❌ Request error: {e}{Style.RESET_ALL}")
        
        # Move window back in time
        current_end_date = current_start_date - timedelta(days=1)  # Avoid overlap
        
        # No need to continue if we've reached our limit
        if len(total_results) >= limit:
            break
    
    # Sort all collected results by date (newest first) and trim to limit
    if total_results:
        total_results.sort(key=lambda x: x["cve"]["published"], reverse=True)
        total_results = total_results[:limit]
        print(f"{Fore.GREEN}✅ Total unique results found across all time windows: {Fore.YELLOW}{len(total_results)}{Style.RESET_ALL}")
    else:
        print(f"{Fore.RED}❌ No CVEs found for the keyword '{keyword}' in the last {max_time_period_days} days.{Style.RESET_ALL}")

    return total_results

def get_severity_color(severity):
    """Return appropriate color based on CVSS severity."""
    if not severity:
        return Fore.WHITE
    
    if severity >= 9.0:
        return Fore.RED + Style.BRIGHT
    elif severity >= 7.0:
        return Fore.RED
    elif severity >= 4.0:
        return Fore.YELLOW
    else:
        return Fore.GREEN

def get_severity_text(severity):
    """Return severity text and color based on CVSS score."""
    if not severity:
        return Fore.WHITE + "N/A"
    
    if severity >= 9.0:
        return f"{Fore.RED}{Style.BRIGHT}CRITICAL ({severity}){Style.RESET_ALL}"
    elif severity >= 7.0:
        return f"{Fore.RED}HIGH ({severity}){Style.RESET_ALL}"
    elif severity >= 4.0:
        return f"{Fore.YELLOW}MEDIUM ({severity}){Style.RESET_ALL}"
    else:
        return f"{Fore.GREEN}LOW ({severity}){Style.RESET_ALL}"

def format_cve_result(cve):
    """Format a CVE result for display."""
    cve_data = cve["cve"]
    cve_id = cve_data["id"]
    published = datetime.fromisoformat(cve_data["published"].replace("Z", "+00:00")).strftime("%Y-%m-%d")
    
    # Get description
    desc_data = cve_data["descriptions"]
    desc = next((d["value"] for d in desc_data if d["lang"] == "en"), "No description available.")
    short_desc = desc[:220] + ("..." if len(desc) > 220 else "")
    
    # Get CVSS score if available
    severity = None
    severity_text = ""
    if "metrics" in cve_data:
        for metric_type in ["cvssMetricV31", "cvssMetricV30", "cvssMetricV2"]:
            if metric_type in cve_data["metrics"]:
                for metric in cve_data["metrics"][metric_type]:
                    if "baseScore" in metric:
                        severity = metric["baseScore"]
                        severity_text = f"\n⚠️ Severity: {get_severity_text(severity)}"
                        break
                if severity:
                    break
    
    # Format the output with colors but no boxes
    return (
        f"{Fore.YELLOW}{Style.BRIGHT}🆔 {cve_id}{Style.RESET_ALL}\n"
        f"{Fore.WHITE}📅 Published: {Fore.YELLOW}{published}{Style.RESET_ALL}{severity_text}\n"
        f"{Fore.WHITE}📝 {short_desc}{Style.RESET_ALL}\n"
        f"{Fore.CYAN}{'-' * 40}{Style.RESET_ALL}"
    )

def print_cve_results(cves):
    """Print formatted CVE results to console."""
    if not cves:
        return
    
    print(f"\n{Fore.GREEN}✅ Found {Fore.YELLOW}{len(cves)}{Fore.GREEN} CVE(s):{Style.RESET_ALL}\n" + "-" * 40)
    
    for cve in sorted(cves, key=lambda x: x["cve"]["published"], reverse=True):
        print(format_cve_result(cve))

def save_results_to_txt(cves):
    """Save CVE results to a text file."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"cve_results_{timestamp}.txt"
    
    try:
        with open(filename, "w", encoding="utf-8") as file:
            file.write(f"CVE Results saved on {datetime.now().isoformat()}\n\n")
            for cve in sorted(cves, key=lambda x: x["cve"]["published"], reverse=True):
                # Remove ANSI color codes for the file output
                clean_result = re.sub(r'\x1b\[\d+m', '', format_cve_result(cve))
                file.write(clean_result + "\n")
        print(f"\n{Fore.GREEN}💾 Results saved to {Fore.YELLOW}{filename}{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}❌ Error saving results: {e}{Style.RESET_ALL}")

def print_menu():
    """Print the main menu options."""
    # Define the exact width to match the box in your output
    box_width = 70  # Adjust this if needed to match the actual width
    
    print(f"{Fore.CYAN}{BANNER}{Style.RESET_ALL}")
    
    horizontal_border = "═" * box_width
    top_border = f"╔{horizontal_border}╗"
    bottom_border = f"╚{horizontal_border}╝"
    
    print(f"{Fore.CYAN}{top_border}{Style.RESET_ALL}")
    
    # Function to create a perfectly aligned line
    def make_box_line(text, color=Fore.WHITE):
        # Account for space after ║ and before the text
        available_width = box_width - 1  # -1 for the space after ║
        padding = available_width - len(text)
        return f"{Fore.CYAN}║ {color}{text}{' ' * padding}{Fore.CYAN}║{Style.RESET_ALL}"
    
    # Print the title and subtitle with exact padding
    print(make_box_line("Welcome to the CVE Lookup Tool", Fore.YELLOW))
    print(make_box_line("Search for vulnerabilities by CVE ID or keyword", Fore.WHITE))
    
    print(f"{Fore.CYAN}{bottom_border}{Style.RESET_ALL}")
    print()

def main():
    """Main function to run the CVE Lookup Tool."""
    clear_screen()
    print_menu()
    
    user_input = input(f"{Fore.YELLOW}🔍 Enter a CVE ID or keyword to search: {Style.RESET_ALL}").strip()
    if not user_input:
        print(f"{Fore.YELLOW}⚠️ No input provided.{Style.RESET_ALL}")
        return

    if is_cve_id(user_input):
        print(f"\n{Fore.CYAN}📋 Searching for specific CVE: {Fore.YELLOW}{user_input}{Style.RESET_ALL}")
        results = search_by_cve_id(user_input)
    else:
        print(f"\n{Fore.CYAN}📋 Searching for keyword: {Fore.YELLOW}{user_input}{Style.RESET_ALL}")
        results = search_keyword_cves(user_input)

    print_cve_results(results)

    if results:
        save = input(f"\n{Fore.YELLOW}💡 Save results to .txt file? (y/n): {Style.RESET_ALL}").strip().lower()
        if save == "y":
            save_results_to_txt(results)
    
    print(f"\n{Fore.CYAN}Thank you for using the CVE Lookup Tool!{Style.RESET_ALL}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n\n{Fore.YELLOW}Search cancelled by user. Goodbye!{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}❌ An unexpected error occurred: {e}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Please try again later.{Style.RESET_ALL}")